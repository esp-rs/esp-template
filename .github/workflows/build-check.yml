name: Check format and compilation

on:
  push:
    paths-ignore:
      - "**/README.md"
  pull_request:
  schedule:
    - cron: "50 7 * * *"

jobs:
  format-clippy-check:
    name: Clippy | Fmt Checks (esp32c3)
    runs-on: ubuntu-latest

    steps:
      - name: Setup | Rust
        uses: actions-rs/toolchain@v1
        with:
          default: true
          components: clippy, rustfmt, rust-src
          toolchain: nightly

      - name: Setup | cargo-generate (binaries)
        id: binaries
        continue-on-error: true
        run: |
          sudo curl -L "https://github.com/cargo-generate/cargo-generate/releases/latest/download/cargo-generate-$(git ls-remote --refs --sort="version:refname" --tags "https://github.com/cargo-generate/cargo-generate" | cut -d/ -f3- | tail -n1)-x86_64-unknown-linux-gnu.tar.gz" -o "/home/runner/.cargo/bin/cargo-generate.tar.gz"
          tar xf "/home/runner/.cargo/bin/cargo-generate.tar.gz" -C /home/runner/.cargo/bin
          chmod u+x /home/runner/.cargo/bin/cargo-generate

      - name: Setup | cargo-generate (cargo)
        if: steps.binaries.outcome != 'success'
        run: cargo install cargo-generate

      - uses: Swatinem/rust-cache@v2

      - uses: actions/checkout@v3
        with:
          path: /home/runner/work/esp-template/esp-template/github-esp-template

      - name: Generate
        run: cargo generate --path /home/runner/work/esp-template/esp-template/github-esp-template --name test-esp32c3 --vcs none --silent -d mcu=esp32c3 -d devcontainer=false -d alloc=false

      - name: Build | Fmt Check
        run: cd test-esp32c3; cargo fmt -- --check

      - name: Build | Clippy
        run: cd test-esp32c3; cargo clippy --no-deps

  compile-check:
    name: Build using the generated Dockerfile
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        board: ["esp32", "esp32s2", "esp32s3", "esp32c3"]

    steps:
      - name: Setup | cargo-generate (binaries)
        id: binaries
        continue-on-error: true
        run: |
          sudo curl -L "https://github.com/cargo-generate/cargo-generate/releases/latest/download/cargo-generate-$(git ls-remote --refs --sort="version:refname" --tags "https://github.com/cargo-generate/cargo-generate" | cut -d/ -f3- | tail -n1)-x86_64-unknown-linux-gnu.tar.gz" -o "/home/runner/.cargo/bin/cargo-generate.tar.gz"
          tar xf "/home/runner/.cargo/bin/cargo-generate.tar.gz" -C /home/runner/.cargo/bin
          chmod u+x /home/runner/.cargo/bin/cargo-generate

      - name: Setup | cargo-generate (cargo)
        if: steps.binaries.outcome != 'success'
        run: cargo install cargo-generate

      - uses: Swatinem/rust-cache@v2

      - uses: actions/checkout@v3
        with:
          path: /home/runner/work/esp-template/esp-template/github-esp-template

      - name: Generate
        run: cargo generate --path /home/runner/work/esp-template/esp-template/github-esp-template --name test-${{ matrix.board }} --vcs none --silent -d mcu=${{ matrix.board }} -d devcontainer=true -d alloc=false

      - name: Update ownership
        run: |
          sudo chown 1000:1000 -R test-${{ matrix.board }}

      - uses: docker/build-push-action@v2
        with:
          context: .
          tags: test-${{ matrix.board }}:latest
          build-args: ESP_BOARD=${{ matrix.board }}
          file: test-${{ matrix.board }}/.devcontainer/Dockerfile
          push: false

      - name: Run the build process with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: test-${{ matrix.board }}:latest
          options: -u esp -v ${{ github.workspace }}/test-${{ matrix.board }}:/home/esp/test-${{ matrix.board }}
          run: |
            cd /home/esp/test-${{ matrix.board }}
            bash -c 'source /home/esp/export-esp.sh && cargo build'
