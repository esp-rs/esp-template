[target.{{ rust_target }}]
runner = "espflash flash --monitor"


{% if logging -%}
[env]
ESP_LOGLEVEL="INFO"
{% endif -%}

[build]
rustflags = [
  "-C", "link-arg=-Tlinkall.x",
{% if wifi -%}
  "-C", "link-arg=-Trom_functions.x",
{% endif -%}
{%- if arch == "xtensa" %}
  "-C", "link-arg=-nostartfiles",
{% else %}
  # Required to obtain backtraces (e.g. when using the "esp-backtrace" crate.)
  # NOTE: May negatively impact performance of produced code
  "-C", "force-frame-pointers",
{% endif -%}
{%- if atomic_emulation == "riscv" %}
  # comment the cfgs below if you do _not_ wish to emulate atomics.
  # enable the atomic codegen option for RISCV
  "-C", "target-feature=+a",
  # tell the core library have atomics even though it's not specified in the target definition
  "--cfg", "target_has_atomic_load_store",
  "--cfg", 'target_has_atomic_load_store="8"',
  "--cfg", 'target_has_atomic_load_store="16"',
  "--cfg", 'target_has_atomic_load_store="32"',
  "--cfg", 'target_has_atomic_load_store="ptr"',
  # enable cas
  "--cfg", "target_has_atomic",
  "--cfg", 'target_has_atomic="8"',
  "--cfg", 'target_has_atomic="16"',
  "--cfg", 'target_has_atomic="32"',
  "--cfg", 'target_has_atomic="ptr"',
{% endif -%}
{%- if atomic_emulation == "esp32s2" %}
  # enable the atomic codegen option for Xtensa
  "-C", "target-feature=+s32c1i",

  # tell the core library have atomics even though it's not specified in the target definition
  "--cfg", "target_has_atomic_load_store",
  "--cfg", 'target_has_atomic_load_store="8"',
  "--cfg", 'target_has_atomic_load_store="16"',
  "--cfg", 'target_has_atomic_load_store="32"',
  "--cfg", 'target_has_atomic_load_store="ptr"',
  # enable cas
  "--cfg", "target_has_atomic",
  "--cfg", 'target_has_atomic="8"',
  "--cfg", 'target_has_atomic="16"',
  "--cfg", 'target_has_atomic="32"',
  "--cfg", 'target_has_atomic="ptr"',
{% endif -%}
]

target = "{{ rust_target }}"

[unstable]
{% if alloc -%}
build-std = ["alloc", "core"]
{%- else -%}
build-std = ["core"]
{%- endif %}
